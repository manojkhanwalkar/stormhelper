package stormappbeans;

import appbeans.Processor;
import appbeans.$name;
import backtype.storm.spout.SpoutOutputCollector;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.topology.base.BaseRichSpout;
import backtype.storm.tuple.Fields;
import backtype.storm.tuple.Values;
import backtype.storm.utils.Utils;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Spout$name extends BaseRichSpout {

SpoutOutputCollector _collector;

public Spout$name() {
}

Processor processor = new $name();

public void open(Map conf, TopologyContext context, SpoutOutputCollector collector) {
this._collector = collector;
}

public void close() {
}

public void nextTuple() {
Utils.sleep(100L);
String[] words = new String[]{"nathan", "mike", "jackson", "golda", "bertels"};
Random rand = new Random();
String word = words[rand.nextInt(words.length)];
this._collector.emit(new Values(new Object[]{word}));
}

public void ack(Object msgId) {
}

public void fail(Object msgId) {
}

public void declareOutputFields(OutputFieldsDeclarer declarer) {
declarer.declare(new Fields(new String[]{"word"}));
}

/*  public Map<String, Object> getComponentConfiguration() {
if(!this._isDistributed) {
HashMap ret = new HashMap();
ret.put("topology.max.task.parallelism", Integer.valueOf(1));
return ret;
} else {
return null;
}
}*/
}
